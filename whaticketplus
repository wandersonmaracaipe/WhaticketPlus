#!/bin/bash

# reset shell colors
tput init

# resolve o diretório real deste script (mesma lógica anterior)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" &>/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE"
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" &>/dev/null && pwd )"

# se extraiu com pasta extra "WhaticketPlus/WhaticketPlus/...", corrige:
if [ ! -f "${PROJECT_ROOT}/variables/manifest.sh" ] && \
   [ -f "${PROJECT_ROOT}/WhaticketPlus/variables/manifest.sh" ]; then
  PROJECT_ROOT="${PROJECT_ROOT}/WhaticketPlus"
fi

# required imports — agora PROJECT_ROOT sempre aponta para o lugar certo
source "${PROJECT_ROOT}/variables/manifest.sh"
source "${PROJECT_ROOT}/utils/manifest.sh"
source "${PROJECT_ROOT}/lib/manifest.sh"

# user configs file
if [[ ! -e "${PROJECT_ROOT}/config" ]]; then
  cat << EOF > "${PROJECT_ROOT}/config"
deploy_password=${deploy_password}
mysql_root_password=${mysql_root_password}
db_pass=${db_pass}
EOF
fi

# ajusta dono e permissão do config
sudo chown root:root "${PROJECT_ROOT}/config"
sudo chmod 700    "${PROJECT_ROOT}/config"
source "${PROJECT_ROOT}/config"

# interactive CLI
inquiry_options

# dependencies related
system_update
system_set_timezone
system_set_ufw
system_node_install
system_pm2_install
system_docker_install
system_puppeteer_dependencies
system_snapd_install
system_nginx_install
system_certbot_install

# system config
system_create_user
system_execute_comand

# backend related
system_unzip_whaticket
backend_chrome_install
backend_set_env
backend_redis_create
backend_node_dependencies
backend_db_migrate
backend_db_seed
backend_start_pm2
backend_nginx_setup

# frontend related
frontend_set_env
frontend_node_dependencies
frontend_start_pm2
frontend_nginx_setup

# network related
system_nginx_conf
system_nginx_restart
system_certbot_setup
